version: '3.4'

services:
  usersservice:
    image: ${DOCKER_REGISTRY-}usersservice
    container_name: usersservice
    build:
      context: .
      dockerfile: UsersService/Dockerfile
    environment:
      - ASPNETCORE_URLS=http://+:8080
    ports:
      - "24110:8080"
    depends_on:
      - postgres
 
  budgetingservice:
    image: ${DOCKER_REGISTRY-}budgetingservice
    container_name: budgetingservice
    build:
      context: .
      dockerfile: BudgetingService/Dockerfile
    environment:
      - ASPNETCORE_URLS=http://+:8080
    ports:
      - "24116:8080"
    depends_on:
      - postgres

  categoryaccountservice:
    image: ${DOCKER_REGISTRY-}categoryaccountservice
    container_name: categoryaccountservice
    build:
      context: .
      dockerfile: CategoryAccountService/Dockerfile
    environment:
      - ASPNETCORE_URLS=http://+:8080
    ports:
      - "24114:8080"
    depends_on:
      - postgres

  transactionsservice:
    image: ${DOCKER_REGISTRY-}transactionsservice
    container_name: transactionsservice
    build:
      context: .
      dockerfile: TransactionsService/Dockerfile
    environment:
      - ASPNETCORE_URLS=http://+:8080
    ports:
      - "24112:8080"
    depends_on:
      - postgres

  apigateway:
    image: ${DOCKER_REGISTRY-}apigateway
    container_name: apigateway
    build:
      context: .
      dockerfile: GatewayService/Dockerfile
    ports:
      - "5000:5000"  
    depends_on:
      - usersservice
      - budgetingservice
      - categoryaccountservice
      - transactionsservice

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_MESSAGE_MAX_BYTES: 1000012
      KAFKA_REPLICA_FETCH_MAX_BYTES: 1000012

  postgres:
    image: postgres:alpine3.17
    container_name: postgres-service
    hostname: postgres-service
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: finance_analyzerdb
      POSTGRES_AUTH_METHOD: TRUST
      PGDATA: /data/postgres
    ports:
      - "5432:5432" 
